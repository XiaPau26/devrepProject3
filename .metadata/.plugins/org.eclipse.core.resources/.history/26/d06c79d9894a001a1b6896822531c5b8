package model.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.session.HttpSessionEventPublisher;


// https://docs.spring.io/spring-security/site/docs/current/guides/html5/form-javaconfig.html
// https://www.boraji.com/spring-security-5-jdbc-based-authentication-example
// https://www.baeldung.com/spring-security-session

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

//	@Autowired
//	DataSource dataSource;
	@Autowired
	private UserDetailsService userDetailsService;

	@Bean
	public PasswordEncoder encoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	public AuthenticationSuccessHandler urlAuthentificationSuccessHandler() {
		return new UrlAuthentifacationSuccessHandler();
	}
	
	@Bean
	public HttpSessionEventPublisher httpSessionEventPublisher() {
	    return new HttpSessionEventPublisher();
	}

	@Override
	protected void configure(AuthenticationManagerBuilder builder) throws Exception {
//		auth.inMemoryAuthentication().withUser("buzz").password("infinity").authorities("ROLE_USER").and()
//				.withUser("woody").password("bullseye").authorities("ROLE_USER");

//		builder.jdbcAuthentication().dataSource(dataSource)
//		.usersByUsernameQuery("select username, password, enabled"
//	            + " from users where username=?")
//	        .authoritiesByUsernameQuery("select username, authority "
//	            + "from authorities where username=?")
//	        .passwordEncoder(new BCryptPasswordEncoder());
		builder.userDetailsService(userDetailsService).passwordEncoder(encoder());
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.sessionManagement().maximumSessions(3);
		http.authorizeRequests().antMatchers("/addadmin", "/superadmin", "/manageadmin", "/chooseadmin", "/addadmin").hasRole("ADMIN")
				// .antMatchers("/adminvalidate").hasRole("STAFF")
				.antMatchers("/adminvalidate").access("authenticated")
				.antMatchers("/", "/formulaire", "/api/formulaire").access("permitAll")
				.and().exceptionHandling().accessDeniedPage("/erreur")
				.and().formLogin()
				.loginPage("/login").successHandler(urlAuthentificationSuccessHandler())
				.and().logout().logoutSuccessUrl("/");// .successForwardUrl("/adminvalidate");
		// .anyRequest().hasAnyRole("ADMIN", "USER").and().httpBasic(); // Authenticate
		// users with

		http.csrf().ignoringAntMatchers("/h2-console/**");
		http.headers().frameOptions().sameOrigin();
	}
}